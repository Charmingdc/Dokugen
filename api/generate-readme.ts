import type { VercelRequest, VercelResponse } from "@vercel/node"
import { kv } from "@vercel/kv"
import { GoogleGenerativeAI } from "@google/generative-ai"
import dotenv from "dotenv"
dotenv.config()

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "")
const model = genAI.getGenerativeModel({
  model: process.env.MODEL_NAME || "",
  systemInstruction: process.env.MODEL_INSTRUCTION || "",
})

const generationConfig = process.env.CONFIG_PAYLOAD ? JSON.parse(process.env.CONFIG_PAYLOAD) : {}

export default async (req: VercelRequest, res: VercelResponse) => {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Method not allowed" })
  }

  try {
    const { projectType, projectFiles, fullCode, options } = req.body
     if (!projectType || !projectFiles || !fullCode || !options) {
    return res.status(400).json({ error: "Missing required fields in request body" })
     }
     
    const cacheKey = `readme:${projectType}:${fullCode.length}`
    
    const cachedReadme = await kv.get<string>(cacheKey)
  
    if(cachedReadme){
      return res.status(200).json({readme: cachedReadme})
    }
    const filesList = Array.isArray(projectFiles) ? projectFiles.join("\n") : "No files provided"
    const hasAPI = options?.hasAPI ? "- **API Endpoints**\n" : ""
    const hasDatabase = options?.hasDatabase ? "- **Database Setup**\n" : ""
    const useDocker = options?.useDocker ? "- **Docker Setup**\n" : ""

    const chatSession = model.startChat({ generationConfig })
    const prompt = `
    Generate a **killer README.md** for a **${projectType}** project.  
    Make it **engaging, structured, and professional**—not robotic.

    ## 🎯 Project Title
    - Generate a **bold, creative title** based on the project type.
    - Example: If it's a "React app", suggest something like **"🚀 React Mastery: A Next-Gen UI Kit"**.

    ## ✨ Features
    - List **4-6 key features** using bullet points.
    - Use **engaging descriptions** (e.g., "⚡ Blazing Fast Performance").
    - Keep it **concise, no unnecessary fluff**.

    ## 🛠️ Project Files
    The project contains these files:
    ${filesList}

    ## 💻 Installation & Setup
    - **Auto-detect** if it's a **Node.js, Python, Go, or Docker** project and generate **accurate installation steps**.
    - Include commands like \`npm install\` or \`docker-compose up\` where necessary.

    ## 🚀 Usage Guide
    - Provide a **clear example** of how to run the project.
    - If it's an API, generate **sample API requests** (e.g., \`curl -X GET /api/users\`).

    ${hasAPI}
    ${hasDatabase}
    ${useDocker}

    ## 🛡️ Security Best Practices (if applicable)
    - If the project deals with authentication, databases, or APIs, include **basic security tips**.

    ## 📜 License
    - Detect if a **license** is present in the project.
    - If missing, suggest **MIT or Apache 2.0**.

    ## 🔥 Pro Tip
    - End with a **motivational message** or a tip for using the project efficiently.

    "This README was Automatically Generated by **Dokugen**."
 `
    const result = await chatSession.sendMessage(prompt)
    const readmeContent = result.response.text() || "FAILED TO CREATE README"
    await kv.set(cacheKey, readmeContent, {ex: 3600})
    return res.status(200).json({ readme: readmeContent })
  } catch (error) {
    console.error("❌ Error generating README:", error)
    return res.status(500).json({ error: "Failed to generate README" })
  }
}